"""第5章并行系统工具"""
在Python中，同时运行多个任务有两种基本做法：进程分支和线程派生。
从功能上来看，二者均依赖于操作系统的底层服务来并行地执行Python代码。
从操作步骤上来看，二者在接口，跨平台移植性和通信方面有很大的差异。

分支的进程是构建平行任务的传统做法，也是Unix工具集的基本组成部分
分支的想法基于程序的复制：当程序调用分支例行程序时，操作系统会创建程序
及其在内存中的进程的副本，然后开始与原有程序并行的运行该副本。

分支操作后，原来的程序副本被称为父进程，而由os.fork创建的副本称为子进程。
一般来说父进程可以分出任意数量的子进程，而子进程也可以再分出子进程。
所有的分支进程在操作系统的控制下独立的并行运行，
并且子进程在父进程结束后还可以继续运行
